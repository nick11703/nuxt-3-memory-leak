# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: Deploy PR for Validation

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: PR number for testing
        required: true
        type: number
      env_to_use:
        description: Environment
        required: true
        type: choice
        options:
          - dev1
          - dev2
      jira_ticket:
        description: JIRA Ticket ID
        required: true
        type: string

permissions:
  pull-requests: write #read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Deployment:
    if: github.ref_name == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
    - name: 'Download artifact'
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "app-server",
          });
          console.log(allArtifacts)
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "app-server"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/app-server.zip`, Buffer.from(download.data));

    # - name: 'Unzip artifact'
    #   run: unzip app-server.zip

    # - name: 'Comment on PR'
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       let fs = require('fs');
    #       let issue_number = ${{ inputs.pr_number }};
    #       await github.rest.issues.createComment({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         issue_number: issue_number,
    #         body: 'Thank you for the PR!'
    #       });
